{"version":3,"sources":["http-common.js","services/StudentService.js","components/AddStudent.js","components/Students.js","components/StudentList.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","headers","Content-type","StudentService","getAll","console","log","process","REACT_APP_STUDENT_APP_API_URL","http","get","id","concat","data","post","update","put","delete","removeAll","firstName","AddStudent","initialStudentState","lastName","student","setStudent","useState","submitted","setSubmitted","handleInputChange","event","name","value","target","_objectSpread","[object Object]","React","createElement","className","onClick","newStudent","htmlFor","type","required","onChange","saveStudent","TutorialDataService","then","response","catch","e","Students","props","currentStudent","setCurrentStudent","message","setMessage","useEffect","getStudent","match","params","deleteStudent","history","push","updateStudent","StudentList","students","setStudents","currentIndex","setCurrentIndex","searchFirstName","setSearchFirstName","retrieveStudents","placeholder","searchTitle","findByFirstName","map","index","setActiveStudent","key","removeAllStudents","Link","to","App","Router","href","Switch","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","BrowserRouter","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.dada877d.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default axios.create({\r\n  baseURL: '/api',\r\n  headers: {\r\n    \"Content-type\": \"application/json\"\r\n  }\r\n});\r\n","import http from \"../http-common\";\r\n\r\nconst getAll = () => {\r\n  console.log(\"#############################################\")\r\n  console.log(process.env.REACT_APP_STUDENT_APP_API_URL);\r\n  return http.get(\"/students\");\r\n};\r\n\r\nconst get = id => {\r\n  return http.get(`/students/${id}`);\r\n};\r\n\r\nconst create = data => {\r\n  return http.post(\"/students\", data);\r\n};\r\n\r\nconst update = (id, data) => {\r\n\r\n  return http.put(`/students/${id}`, data);\r\n};\r\n\r\nconst remove = id => {\r\n  return http.delete(`/students/${id}`);\r\n};\r\n\r\nconst removeAll = () => {\r\n  return http.delete(`/students`);\r\n};\r\n\r\nconst findByFirstName = firstName => {\r\n  return http.get(`/students?firstName=${firstName}`);\r\n};\r\n\r\nexport default {\r\n  getAll,\r\n  get,\r\n  create,\r\n  update,\r\n  remove,\r\n  removeAll,\r\n  findByFirstName: findByFirstName\r\n};\r\n","import React, { useState } from \"react\";\r\nimport TutorialDataService from \"../services/StudentService\";\r\n\r\nconst AddStudent = () => {\r\n  const initialStudentState = {\r\n    id: null,\r\n    firstName: \"\",\r\n    lastName: \"\"\r\n  };\r\n  const [student, setStudent] = useState(initialStudentState);\r\n  const [submitted, setSubmitted] = useState(false);\r\n\r\n  const handleInputChange = event => {\r\n    const { name, value } = event.target;\r\n    setStudent({ ...student, [name]: value });\r\n  };\r\n\r\n  const saveStudent = () => {\r\n    var data = {\r\n      firstName: student.firstName,\r\n      lastName: student.lastName\r\n    };\r\n\r\n    TutorialDataService.create(data)\r\n      .then(response => {\r\n        setStudent({\r\n          id: response.data.id,\r\n          firstName: response.data.firstName,\r\n          lastName: response.data.lastName\r\n        });\r\n        setSubmitted(true);\r\n        console.log(response.data);\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  const newStudent = () => {\r\n    setStudent(initialStudentState);\r\n    setSubmitted(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"submit-form\">\r\n      {submitted ? (\r\n        <div>\r\n          <h4>You submitted successfully!</h4>\r\n          <button className=\"btn btn-success\" onClick={newStudent}>\r\n            Add\r\n          </button>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"title\">First Name</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"firstName\"\r\n              required\r\n              value={student.firstName}\r\n              onChange={handleInputChange}\r\n              name=\"firstName\"\r\n            />\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"description\">Last Name</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"lastName\"\r\n              required\r\n              value={student.lastName}\r\n              onChange={handleInputChange}\r\n              name=\"lastName\"\r\n            />\r\n          </div>\r\n\r\n          <button onClick={saveStudent} className=\"btn btn-success\">\r\n            Submit\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddStudent;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport TutorialDataService from \"../services/StudentService\";\r\n\r\nconst Students = props => {\r\n  const initialTutorialState = {\r\n    id: null,\r\n    firstName: \"\",\r\n    lastName: \"\"\r\n  };\r\n  const [currentStudent, setCurrentStudent] = useState(initialTutorialState);\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  const getStudent = id => {\r\n    console.log(\"Getting current studnet\")\r\n    TutorialDataService.get(id)\r\n      .then(response => {\r\n        console.log(response);\r\n        setCurrentStudent(response.data);\r\n        console.log(response.data);\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getStudent(props.match.params.id);\r\n  }, [props.match.params.id]);\r\n\r\n  const handleInputChange = event => {\r\n    const { name, value } = event.target;\r\n    setCurrentStudent({ ...currentStudent, [name]: value });\r\n  };\r\n\r\n  const updatePublished = status => {\r\n    var data = {\r\n      id: currentStudent.id,\r\n      firstName: currentStudent.firstName,\r\n      lastName: currentStudent.lastName,\r\n    };\r\n\r\n    TutorialDataService.update(currentStudent.id, data)\r\n      .then(response => {\r\n        setCurrentStudent({ ...currentStudent, published: status });\r\n        console.log(response.data);\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  const updateStudent = () => {\r\n    TutorialDataService.update(currentStudent.id, currentStudent)\r\n      .then(response => {\r\n        console.log(response.data);\r\n        setMessage(\"Student was updated successfully!\");\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  const deleteStudent = () => {\r\n    TutorialDataService.remove(currentStudent.id)\r\n      .then(response => {\r\n        console.log(response.data);\r\n        props.history.push(\"/students\");\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {currentStudent ? (\r\n        <div className=\"edit-form\">\r\n          <h4>Students</h4>\r\n          <form>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"title\">First Name</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"firstName\"\r\n                name=\"firstName\"\r\n                value={currentStudent.firstName}\r\n                onChange={handleInputChange}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"description\">Last Name</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"lastName\"\r\n                name=\"lastName\"\r\n                value={currentStudent.lastName}\r\n                onChange={handleInputChange}\r\n              />\r\n            </div>\r\n\r\n\r\n          </form>\r\n\r\n          <button className=\"badge badge-danger mr-2\" onClick={deleteStudent}>\r\n            Delete\r\n          </button>\r\n\r\n          <button\r\n            type=\"submit\"\r\n            className=\"badge badge-success\"\r\n            onClick={updateStudent}\r\n          >\r\n            Update\r\n          </button>\r\n          <p>{message}</p>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <br />\r\n          <p>Please click on a Student...</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Students;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport TutorialDataService from \"../services/StudentService\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst StudentList = () => {\r\n  const [students, setStudents] = useState([]);\r\n  const [currentStudent, setCurrentStudent] = useState(null);\r\n  const [currentIndex, setCurrentIndex] = useState(-1);\r\n  const [searchFirstName, setSearchFirstName] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    retrieveStudents();\r\n  }, []);\r\n\r\n  const onChangeSearchFirstName = e => {\r\n    const searchTitle = e.target.value;\r\n    setSearchFirstName(searchTitle);\r\n  };\r\n\r\n  const retrieveStudents = () => {\r\n    TutorialDataService.getAll()\r\n      .then(response => {\r\n        setStudents(response.data);\r\n        console.log(response.data);\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  const refreshList = () => {\r\n    retrieveStudents();\r\n    setCurrentStudent(null);\r\n    setCurrentIndex(-1);\r\n  };\r\n\r\n  const setActiveStudent = (student, index) => {\r\n    setCurrentStudent(student);\r\n    setCurrentIndex(index);\r\n  };\r\n\r\n  const removeAllStudents = () => {\r\n    TutorialDataService.removeAll()\r\n      .then(response => {\r\n        console.log(response.data);\r\n        refreshList();\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  const findByFirstName = () => {\r\n    TutorialDataService.findByFirstName(searchFirstName)\r\n      .then(response => {\r\n        setStudents(response.data);\r\n        console.log(response.data);\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"list row\">\r\n      <div className=\"col-md-8\">\r\n        <div className=\"input-group mb-3\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"Search by First Name\"\r\n            value={searchFirstName}\r\n            onChange={onChangeSearchFirstName}\r\n          />\r\n          <div className=\"input-group-append\">\r\n            <button\r\n              className=\"btn btn-outline-secondary\"\r\n              type=\"button\"\r\n              onClick={findByFirstName}\r\n            >\r\n              Search\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"col-md-6\">\r\n        <h4>Student List</h4>\r\n\r\n        <ul className=\"list-group\">\r\n          {students &&\r\n            students.map((student, index) => (\r\n              <li\r\n                className={\r\n                  \"list-group-item \" + (index === currentIndex ? \"active\" : \"\")\r\n                }\r\n                onClick={() => setActiveStudent(student, index)}\r\n                key={index}\r\n              >\r\n                {student.firstName}\r\n              </li>\r\n            ))}\r\n        </ul>\r\n\r\n        <button\r\n          className=\"m-3 btn btn-sm btn-danger\"\r\n          onClick={removeAllStudents}\r\n        >\r\n          Remove All\r\n        </button>\r\n      </div>\r\n      <div className=\"col-md-6\">\r\n        {currentStudent ? (\r\n          <div>\r\n            <h4>Student</h4>\r\n            <div>\r\n              <label>\r\n                <strong>First Name:</strong>\r\n              </label>{\" \"}\r\n              {currentStudent.firstName}\r\n            </div>\r\n            <div>\r\n              <label>\r\n                <strong>Last Name:</strong>\r\n              </label>{\" \"}\r\n              {currentStudent.lastName}\r\n            </div>\r\n\r\n            <Link\r\n              to={\"/students/\" + currentStudent.id}\r\n              className=\"badge badge-warning\"\r\n            >\r\n              Edit\r\n            </Link>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <br />\r\n            <p>Please click on a Student...</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StudentList;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\n\r\nimport AddStudent from \"./components/AddStudent\";\r\nimport Students from \"./components/Students\";\r\nimport StudentList from \"./components/StudentList\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\r\n          <a href=\"/students\" className=\"navbar-brand\">\r\n            Student Management APP\r\n          </a>\r\n          <div className=\"navbar-nav mr-auto\">\r\n            <li className=\"nav-item\">\r\n              <Link to={\"/students\"} className=\"nav-link\">\r\n                Students\r\n              </Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link to={\"/add\"} className=\"nav-link\">\r\n                Add\r\n              </Link>\r\n            </li>\r\n          </div>\r\n        </nav>\r\n\r\n        <div className=\"container mt-3\">\r\n          <Switch>\r\n            <Route exact path={[\"/\", \"/students\"]} component={StudentList} />\r\n            <Route exact path=\"/add\" component={AddStudent} />\r\n            <Route path=\"/students/:id\" component={Students} />\r\n          </Switch>\r\n        </div>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();"],"sourceRoot":""}